# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Post @model
@auth(rules: [
  { allow: owner, ownerField: "owner", provider: userPools, operations: [read, create, delete] }
  { allow: private, provider: userPools, operations: [read] }
  { allow: public, operations: [read] }
])
{
  id: ID
  content: String!
  owner: String
    @index(
        name: "BySpecificOwner", 
        queryField: "listPostsBySpecificOwner",
        sortKeyFields: ["timestamp"] # sort posts-by-owner by time
    )
  timestamp: Int!
  type: String! # always should be `Post` - used in SortByTimestamp GSI
    @index(
        name: "SortByTimestamp"
        queryField: "listPostsSortedByTimestamp"
        sortKeyFields: ["timestamp"] # sort posts by time overall
    )
  # likes: [Like] @hasMany(
  #   indexName: "LikesByPost",
  #   fields: ["id"]
  # )
}

type FollowRelationship @model
	@auth(rules: [
		{allow: owner, ownerField: "followerId", provider: userPools, operations:[read, create, delete]},
		{allow: private, provider: userPools, operations:[read]}
	])
{
  # id: ID
  followeeId: ID! # username of person being followed (someone else) 
    # @index ( 
    #   name: "SortByFolloweeId"
    #   sortKeyFields: ["followerId"]
    # )
	followerId: ID! @primaryKey(sortKeyFields: ["followeeId"]) # me
  
  # followerId: ID! @index (  # username of person doing the following (me)
  #     name: "SortByFollowerId"
  #     sortKeyFields: ["followeeId"]
  #   )
	timestamp: Int! 
}

# type Like @model 
# @auth(rules: [
#   { allow: owner, ownerField: "createdBy", provider: userPools, operations: [read, update, delete] }
#   { allow: private, provider: userPools, operations: [read, update] }
#   { allow: public, operations: [read] }
# ])
# {
#   id: ID!
#   likeUserId: String! # anonymous users cannot like a post
#   likeUserHandle: String 
#   createdAt: AWSDateTime 
#   post: Post @belongsTo(fields: ["postID"])
#   postID: ID @index(
#     name: "likesByPost"
#   )
# }

